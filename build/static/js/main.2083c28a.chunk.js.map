{"version":3,"sources":["store/reducers/goodsReducer.js","store/types/goodTypes.js","store/reducers/userReducer.js","common/js/tool.js","store/types/userTypes.js","store/reducers/indexReducer.js","store/index.js","common/js/request.js","common/js/config.js","store/actions/goodsActions.js","API/goods.js","pages/Index/Index.jsx","pages/GoodsDetail/GoodsDetail.jsx","App.js","serviceWorker.js","index.js"],"names":["initialState","goodsList","goodsDetail","goodsReducer","state","arguments","length","undefined","action","type","Object","objectSpread","data","push","jcnuserid","name","reg","RegExp","r","window","location","search","substr","match","unescape","_getQueryString","userReducer","indexReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","logger","getState","service","axios","create","baseURL","timeout","interceptors","request","use","config","method","openId","response","status","bizStatus","Promise","resolve","reject","err","getGoodsList","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","taskList","wrap","_context","prev","next","fetch","url","pageNum","pageSize","then","res","sent","abrupt","stop","_x","apply","this","Index","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","goDetailPage","bind","assertThisInitialized","goodsActions","history","react_default","createElement","className","onClick","map","item","key","taskId","Component","withRouter","connect","bindActionCreators","GoodsDetail","params","goodsId","App","BrowserRouter","Switch","Route","path","exact","component","Redirect","to","Boolean","hostname","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2083c28a.chunk.js","sourcesContent":["import * as types from '../types/goodTypes'\n\nconst initialState = {\n  goodsList: [],\n  goodsDetail: []\n}\n\n\nconst goodsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.GETGOODSLIST:\n      return {\n        ...state,\n        goodsList: action.data\n      }\n    case types.ADDGOODS:\n      return {\n        ...state,\n        goodsList: state.goodsList.push(action.data)\n      }\n    case types.GETGOODSDETAIL:\n      return {\n        ...state,\n        goodsDetail: action.data\n      }\n    default:\n      return state\n  }\n}\n\n\nexport default goodsReducer\n","export const GETGOODSLIST = 'GETGOODSLIST' // 获取商品列表\n\nexport const ADDGOODS = 'ADDGOODS' //  添加商品\n\nexport const GETGOODSDETAIL = 'GETGOODSDETAIL' // 获取商品详情","import * as types from '../types/userTypes'\nimport { _getQueryString } from '../../common/js/tool'\n\nconst initialState = {\n  jcnuserid: _getQueryString('jcnuserid')\n}\n\n\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.GETJCNUSERID:\n      return {\n        ...state,\n        jcnuserid: action.jcnuserid\n      }\n    default:\n      return state\n  }\n}\n\n\nexport default userReducer","export function _getQueryString(name) {\n  var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)')\n  var r = window.location.search.substr(1).match(reg)\n  if (r != null) return unescape(r[2])\n  return null\n}","\nexport const GETJCNUSERID = 'GETJCNUSERID' // 获取用户jcnuserid","import { combineReducers } from 'redux'\n\nimport goodsReducer from './goodsReducer'\nimport userReducer from './userReducer'\n\nconst indexReducer = combineReducers({\n  goodsReducer,\n  userReducer\n})\n\n\nexport default indexReducer","import { applyMiddleware, createStore, compose } from 'redux'\n\nimport thunk from 'redux-thunk'\nimport logger from 'redux-logger'\nimport indexReducer from './reducers/indexReducer'\n\nconst store = createStore(\n  indexReducer,\n  compose(\n    applyMiddleware(thunk, logger)\n  )\n)\n\nexport default store","import axios from 'axios'\nimport store from '../../store'\nimport  fetchUrl  from './config'\n\n\nconst jcnuserid = store.getState().userReducer.jcnuserid\n\nconst service = axios.create({\n  baseURL: fetchUrl,\n  timeout: 15000\n})\n\n// 请求配置\nservice.interceptors.request.use(\n  config => {\n    config.method = 'post'\n    config.data = {\n      openId: jcnuserid,\n      ...config.data\n    }\n    return config\n  }\n)\n\nservice.interceptors.response.use(\n  response => {\n    if (response.status === 200) {\n      if (response.data.bizStatus === 0) {\n        return Promise.resolve(response)\n      }\n      return Promise.reject(response)\n    }\n  },\n  err => {\n    return Promise.reject(err)\n  }\n)\n\n\nexport default service","const fetchUrl =\n  process.env.NODE_ENV === 'development' ? 'https://wechat-mp-test.j.cn' :\n    process.env.NODE_ENV === 'production' ? 'https://bbs.j.cn' : ''\nexport default fetchUrl","import * as GoodsServer from '@API/goods'\n\n\nimport * as types from '@store/types/goodTypes'\n\n\nexport const getGoodsList = () =>  async (dispatch) => {\n  const taskList = await GoodsServer.getGoodsList().then(res => res.data.taskList)\n  return dispatch({\n    type: types.GETGOODSLIST,\n    data: taskList\n  })\n}","import fetch from '../common/js/request'\n\nexport const getGoodsList = () => {\n  return fetch({\n    url: '/api/makeMoneyTaskList',\n    data: {\n      pageNum: 1,\n      pageSize: 10\n    }\n  })\n}\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { withRouter } from 'react-router'\n\nimport * as goodsActions from '../../store/actions/goodsActions'\n\n//css\nimport './index.scss'\n\nclass Index extends Component {\n\n  constructor(props) {\n    super(props)\n    this.goDetailPage = this.goDetailPage.bind(this)\n  }\n\n  componentWillMount() {\n    this.props.goodsActions.getGoodsList()\n  }\n\n  componentDidMount() {\n  }\n\n  goDetailPage() {\n    this.props.history.push('/goods-detail/' + 213)\n  }\n\n  render() {\n    const goodsList = this.props.goodsList\n    return (\n      <div className=\"index-page\">\n        <span className=\"name\">这是一个标记</span>\n        <button onClick={this.goDetailPage}>跳转</button>\n        <ul>\n          {\n            goodsList && goodsList.length > 0 ?\n              goodsList.map(item => <li key={item.taskId}>{item.name}</li>) : null\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    goodsList: state.goodsReducer.goodsList\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    goodsActions: bindActionCreators(goodsActions, dispatch)\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Index))\n","import React, {Component} from 'react'\n\n//css\nimport './goodsDetail.scss'\nclass GoodsDetail extends Component {\n  constructor(props){\n    super(props)\n  }\n  componentWillMount() {\n    // 获取到商品Id\n    const goodsId = this.props.match.params.goodsId\n  }\n\n  render() {\n    return (\n      <div className=\"goods-detail-page\">\n        <span className=\"name\">商品详情页</span>\n      </div>\n    )\n  }\n}\n\n\nexport default GoodsDetail","import React, { Component } from 'react'\nimport Index from './pages/Index/Index'\nimport GoodsDetail from './pages/GoodsDetail/GoodsDetail'\nimport { Route, BrowserRouter, Switch, Redirect } from 'react-router-dom'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <Switch>\n            <Route path=\"/\" exact component={Index} />\n            <Route path=\"/goods-detail/:goodsId\" component={GoodsDetail} />\n            <Redirect to=\"/\" />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'lib-flexible'\n\nimport '@common/styles/common.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\n\nReactDOM.render(\n  (\n    <Provider store={store}>\n      <App />\n    </Provider>\n  )\n  , document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}